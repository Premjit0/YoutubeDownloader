import sys
import time
import os
import urllib.parse
from yt_dlp import YoutubeDL
from fpdf import FPDF
import keyboard  # pip install keyboard

# Global flag for pause
PAUSE_FLAG = False


def format_time(seconds):
    """Convert seconds to a formatted string in sec, mm:ss, or hh:mm:ss."""
    seconds = int(seconds)
    if seconds < 60:
        return f"{seconds} sec"
    minutes, sec = divmod(seconds, 60)
    if minutes < 60:
        return f"{minutes}:{sec:02d}"
    hours, minutes = divmod(minutes, 60)
    return f"{hours}:{minutes:02d}:{sec:02d}"


def fix_playlist_url(url):
    """
    If the provided URL has a "list=" parameter but isn’t in the recommended format,
    rebuild it as: https://www.youtube.com/playlist?list=PLAYLIST_ID
    """
    parsed = urllib.parse.urlparse(url)
    query = urllib.parse.parse_qs(parsed.query)
    if "list" in query:
        playlist_id = query["list"][0]
        if not parsed.path.startswith("/playlist"):
            fixed_url = f"https://www.youtube.com/playlist?list={playlist_id}"
            print(f"Fixed playlist URL: {fixed_url}")
            return fixed_url
    return url


def on_pause_hotkey():
    """
    Hotkey callback: This function is triggered when Ctrl+Shift+P is pressed.
    It immediately sets PAUSE_FLAG = True and prompts the user whether to resume.
    The download remains paused until you choose to resume by typing 'Y'.
    """
    global PAUSE_FLAG
    if not PAUSE_FLAG:
        PAUSE_FLAG = True
        print("\n=== The program has been PAUSED ===")
        while True:
            # Prompt user to resume or remain paused
            decision = input("Type Y to resume or N to remain paused: ").strip().lower()
            if decision == 'y':
                PAUSE_FLAG = False
                print("Resuming download...\n")
                break
            elif decision == 'n':
                print("Download remains paused. Type Y to resume when ready.")
            else:
                print("Invalid input. Please type Y to resume or N to remain paused.")


def progress_hook(d):
    """
    Display live download progress: percentage, download speed (KB/s),
    ETA, and elapsed time (formatted). If PAUSE_FLAG is True, progress updates wait.
    """
    while PAUSE_FLAG:
        time.sleep(0.2)
    if d['status'] == 'downloading':
        downloaded = d.get("downloaded_bytes") or 0
        total_bytes = d.get("total_bytes") or d.get("total_bytes_estimate") or 0
        speed = d.get("speed") or 0
        eta = d.get("eta", 0)
        elapsed = d.get("elapsed", 0)
        if total_bytes:
            percent = downloaded / total_bytes * 100
            speed_kb = speed / 1024 if speed > 0 else 0
            eta_str = f"ETA: {format_time(eta)}" if eta else ""
            elapsed_str = f"Elapsed: {format_time(elapsed)}" if elapsed else ""
            sys.stdout.write(f"\rDownloading: {percent:.2f}% at {speed_kb:.2f} KB/s, {eta_str}, {elapsed_str}")
            sys.stdout.flush()
    elif d['status'] == 'finished':
        sys.stdout.write("\nDownload completed.\n")


def print_file_details(video_url):
    """
    Quickly extract file details for the given video URL (title, format, quality, filesize).
    Returns a tuple: (title, format_extension, quality, filesize_str).
    """
    details = {"title": "Unknown", "ext": "unknown", "height": "N/A", "filesize": None}
    try:
        with YoutubeDL({'quiet': True, 'skip_download': True, 'socket_timeout': 60}) as ydl:
            info = ydl.extract_info(video_url, download=False)
            details["title"] = info.get("title", "Unknown")
            best_fmt = None
            best_height = 0
            for fmt in info.get("formats", []):
                height = fmt.get("height")
                if height is not None and height <= 1080 and height > best_height:
                    best_fmt = fmt
                    best_height = height
            if best_fmt:
                details["ext"] = best_fmt.get("ext", "unknown")
                details["height"] = best_fmt.get("height", "N/A")
                filesize = best_fmt.get("filesize") or best_fmt.get("filesize_approx")
                details["filesize"] = filesize
    except Exception as e:
        print(f"Error fetching file details: {e}")

    filesize_str = f"{details['filesize'] / (1024 * 1024):.2f} MB" if details["filesize"] else "N/A"
    return (details["title"], details["ext"], details["height"], filesize_str)


def convert_sub_to_pdf(sub_file, pdf_file):
    """
    Converts a subtitle (VTT) file to a PDF using FPDF.
    """
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    try:
        with open(sub_file, "r", encoding="utf-8") as f:
            for line in f:
                pdf.multi_cell(0, 10, line)
        pdf.output(pdf_file)
        print(f"Transcript converted to PDF: {pdf_file}")
    except Exception as e:
        print(f"Error converting transcript to PDF: {e}")


def display_and_choose_videos(playlist_url):
    """
    Uses flat extraction (video ID and title only) to quickly list videos.
    Prompts user for download mode (all or selected) and confirmation.
    Returns a list of tuples: (serial_number, video_id, title).
    """
    fixed_url = fix_playlist_url(playlist_url)
    flat_opts = {
        'quiet': True,
        'skip_download': True,
        'extract_flat': True,
        'playlist_retries': 5,
        'socket_timeout': 30,
        'ignoreerrors': True,
    }
    with YoutubeDL(flat_opts) as ydl:
        print("Extracting flat playlist information...")
        flat_info = ydl.extract_info(fixed_url, download=False)
        entries = flat_info.get("entries", [])

    if not entries:
        print("No videos found in the provided playlist!")
        sys.exit(1)

    video_list = []
    print(f"\nFound {len(entries)} videos:\n")
    for index, entry in enumerate(entries, start=1):
        title = entry.get("title", "No Title")
        vid = entry.get("id")
        video_list.append((index, vid, title))
        print(f"{index}. {title}")

    while True:
        print("\nDownload options:")
        print("  [A] Download ALL videos")
        print("  [S] Select specific videos (comma separated indices, e.g., 1,3,5)")
        mode = input("Choose download mode (A/S): ").strip().lower()
        if mode == 'a':
            selected = video_list
        elif mode == 's':
            indices = input("Enter video indices to download (comma separated): ")
            try:
                sel_indices = [int(x.strip()) for x in indices.split(",") if x.strip().isdigit()]
                selected = [video_list[i - 1] for i in sel_indices if 0 < i <= len(video_list)]
            except Exception as e:
                print(f"Error parsing selection: {e}")
                continue
        else:
            print("Invalid option. Try again.")
            continue

        print(f"\nYou have selected {len(selected)} video(s).")
        confirm = input("Are you sure? (Y for yes, N for no): ").strip().lower()
        if confirm == 'y':
            return selected
        else:
            print("Reselecting videos...\n")


def download_videos(selected_videos, transcript_enabled):
    """
    Downloads each selected video one by one.
      - Displays file details (title, format, quality, size) before starting.
      - The filename is prefixed with its serial number (e.g. "L1 ...").
      - Shows per‑video and overall elapsed time (ETA/elapsed in mm:ss or hh:mm:ss).
      - Checks for a hotkey interrupt (Ctrl+Shift+P) to pause/resume on the fly.
      - If transcript_enabled is True, after download attempts to convert subtitles (VTT) to PDF.
    Returns a list of videos (by serial) that failed to download.
    """
    overall_start = time.time()
    failed_videos = []

    for serial, video_id, _ in selected_videos:
        video_url = f"https://www.youtube.com/watch?v={video_id}"
        f_title, ext, quality, filesize_str = print_file_details(video_url)
        print(f"\n[Video {serial}/{len(selected_videos)}] {f_title}")
        print(f"Details: Format: {ext}, Quality: {quality}p, Size: {filesize_str}")
        print(f"(Overall elapsed time so far: {format_time(time.time() - overall_start)})")

        outtmpl = f"L{serial} %(title)s.%(ext)s"
        ydl_opts = {
            'format': 'best[height<=1080]',
            'progress_hooks': [progress_hook],
            'outtmpl': outtmpl,
            'noplaylist': True,
            'socket_timeout': 60,
            'retries': 10,
        }
        if transcript_enabled:
            ydl_opts.update({
                'writesubtitles': True,
                'subtitleslangs': ['en'],
                'subtitlesformat': 'vtt',
                'writeautomaticsub': True,
            })

        print(f"Starting download of '{f_title}' ...")
        video_start = time.time()
        try:
            with YoutubeDL(ydl_opts) as ydl:
                ydl.download([video_url])
        except Exception as e:
            print(f"\nError downloading '{f_title}': {e}")
            failed_videos.append((serial, video_id, f_title))
            continue

        video_time = time.time() - video_start
        print(f"\nTime taken for '{f_title}': {format_time(video_time)}")
        print(f"Total overall elapsed time: {format_time(time.time() - overall_start)}")

        # Process transcript if enabled:
        if transcript_enabled:
            base_filename = f"L{serial} {f_title}"
            # Expect subtitle file as .en.vtt
            vtt_filename = base_filename + ".en.vtt"
            pdf_filename = base_filename + " Transcript.pdf"
            if os.path.exists(vtt_filename):
                print(f"Converting transcript for '{f_title}' to PDF...")
                convert_sub_to_pdf(vtt_filename, pdf_filename)
            else:
                print("No transcript available for this video.")

    return failed_videos


def main():
    # Register the hotkey for pause/resume (Ctrl+Shift+P)
    keyboard.add_hotkey('ctrl+shift+p', on_pause_hotkey)

    playlist_url = input("Enter the YouTube playlist URL: ").strip()
    if not playlist_url:
        print("A valid URL is required.")
        return

    selected_videos = display_and_choose_videos(playlist_url)

    trans_opt = input(
        "Do you want to download transcripts as PDF (if available)? (Y for yes, N for no): ").strip().lower()
    transcript_enabled = (trans_opt == 'y')

    failed_videos = download_videos(selected_videos, transcript_enabled)

    if failed_videos:
        print("\nThe following videos failed to download:")
        for serial, vid, title in failed_videos:
            print(f"  L{serial} {title}")
        ans = input("\nDo you want to re-download/resume the failed videos? (Y for yes, N for no): ").strip().lower()
        if ans == 'y':
            failed_videos = download_videos(failed_videos, transcript_enabled)
            if failed_videos:
                print("\nStill failed:")
                for serial, vid, title in failed_videos:
                    print(f"  L{serial} {title}")
            else:
                print("\nAll failed videos have now been downloaded successfully.")
    else:
        print("\nAll videos downloaded successfully.")

    print("\nDownload process finished.")


if __name__ == '__main__':
    main()
